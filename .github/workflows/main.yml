name: Automated Docker Build and Push

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '44 10 * * 2'
  workflow_dispatch:
    
env:
  OWNER: "jagrosh"
  REPOSITORY: "MusicBot"
  FULL_REPO: "jagrosh/MusicBot"
  PACKAGE_NAME: "jmusicbot"


jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.release_version.outputs.tag }}
      image_tag: ${{ steps.image_version.outputs.tag }}
    steps:
      - name: Authenticate to GitHub CLI
        run: gh auth login --with-token <<< "${{ github.token }}"

      - name: Get remote musicbot version
        id: release_version
        run: |
          echo "Fetching most recent version from the release in ${{ env.FULL_REPO }}"
          LATEST_RELEASE=$(gh release view --repo ${{ env.FULL_REPO }} --json tagName --jq .tagName)
          
          echo "Latest release: $LATEST_RELEASE"
          echo "tag=$LATEST_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Get remote musicbot version
        id: image_version
        run: |
          echo "Fetching most recent version of the docker image at ${{ github.actor }}/${{ github.repository }}"
    
          if ! tag=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository_owner }}/packages/container/${{ env.PACKAGE_NAME }}/versions \
            --jq '.[0].metadata.container.tags[0]' 2>/dev/null); then
            echo "No image versions found (possibly first push)."
            tag="none"
          fi

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          
      - name: Write GitHub summary with versions
        run: |
          echo "## Version Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Latest Docker Image Tag:** \`${{ steps.release_version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Latest GitHub Release Tag:** \`${{ steps.image_version.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ 1 == 2 }}
    # if: needs.check-version.outputs.release_tag != needs.check-version.outputs.image_tag
    steps:
      - name: Checkout Dockerfile
        id: checkout
        uses: actions/checkout@v4
        
      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: |
            alexandreteles/jmusicbot:${{ needs.check-version.outputs.release_tag }}
